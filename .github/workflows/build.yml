name: build

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - ".github"
      - ".vscode"
      - "scripts"
      - "README.md"
      - "README_EN.md"
      - ".env.example"
      - ".gitignore"
  workflow_dispatch:
  workflow_call:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      TARGET: "x86_64-unknown-linux-gnu"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install Deno dependencies
        run: deno install

      - name: Build Deno application
        run: deno task bundle && deno task compile:linux

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ env.TARGET }}

      - name: Build Rust application
        run: cargo build --release --target $TARGET

      - name: Create dist
        env:
          DIST_DIR: "dist/xdwlan-login-x86_64-unknown-linux-gnu"
        run: |
          mkdir -p $DIST_DIR
          cp build/xdwlan-login-worker $DIST_DIR
          cp target/$TARGET/release/xdwlan-login $DIST_DIR
          cp config.example.yaml $DIST_DIR/config.yaml
          tar cf - -C dist xdwlan-login-x86_64-unknown-linux-gnu | xz > dist/xdwlan-login-x86_64-unknown-linux-gnu.tar.xz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: dist/xdwlan-login-x86_64-unknown-linux-gnu.tar.xz
          retention-days: 2

  build-windows:
    runs-on: windows-latest
    env:
      TARGET: "x86_64-pc-windows-msvc"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install Deno dependencies
        run: deno install

      - name: Build Deno application
        run: deno task bundle && deno task compile:windows

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ env.TARGET }}

      - name: Build Rust application
        run: cargo build --release --target $env:TARGET

      - name: Create dist
        env:
          DIST_DIR: "dist/xdwlan-login-x86_64-pc-windows-msvc"
        run: |
          New-Item -ItemType Directory -Path $env:DIST_DIR
          Copy-Item build/xdwlan-login-worker.exe -Destination $env:DIST_DIR
          Copy-Item target/$env:TARGET/release/xdwlan-login.exe -Destination $env:DIST_DIR
          Copy-Item config.example.yaml -Destination $env:DIST_DIR/config.yaml
          Compress-Archive -Path $env:DIST_DIR -DestinationPath dist/xdwlan-login-x86_64-pc-windows-msvc.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: dist/xdwlan-login-x86_64-pc-windows-msvc.zip
          retention-days: 2
